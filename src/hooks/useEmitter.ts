import React from 'react';
import { DeviceEventEmitter } from 'react-native';

export enum EDeviceEmitter {
  GLOBAL_LOADING = 'GLOBAL_LOADING',
  SHARE_TIMER = 'SHARE_TIMER',
  MODAL_REPORT = 'MODAL_REPORT',
  DEEP_LINK_INVITATION = 'DEEP_LINK_INVITATION',
  DEEP_LINK_PLAY_STUMP = 'DEEP_LINK_PLAY_STUMP',
  SHARE_SUCCESFULLY = 'SHARE_SUCCESFULLY',
  FETCH_DATA_HOME = '[HOME] FETCH_DATA_HOME',
  FETCH_DATA_DRAFT = 'FETCH_DATA_DRAFT',
  FETCH_DATA_SCHEDULE = 'FETCH_DATA_SCHEDULE',
  FETCH_DATA_NOTIFICATION = 'FETCH_DATA_NOTIFICATION',
  RECORD_SCHEDULER_LATER = '[RECORD] RECORD_SCHEDULER_LATER',
  EVENT_CLICK_PAUSE = '[RECORD] EVENT_CLICK_PAUSE',
  RECORD_PLAY_VIDEO = '[RECORD] RECORD_PLAY_VIDEO',
  DELETE_CONVERSATION = '[CONVERSATION] DELETE_CONVERSATION',
  UPDATE_RESCHEDULE_SUCCESS = '[CONVERSATION] UPDATE_RESCHEDULE_SUCCESS',
  //
  FETCH_SHARED_TAB_PROFILE = '[PROFILE] FETCH_SHARED_TAB_PROFILE',
  FETCH_SHARED_TAB_OTHER_PROFILE = '[OTHER_PROFILE] FETCH_SHARED_TAB_OTHER_PROFILE',
  FETCH_ALL_TAB = '[PROFILE] FETCH_ALL_TAB',
  //
  UPDATE_NUMBER_SHARE_HOME = '[HOME] UPDATE_NUMBER_SHARE_HOME',
  UPDATE_NUMBER_SHARE_PROFILE = '[PROFILE] UPDATE_NUMBER_SHARE_PROFILE',
  UPDATE_NUMBER_SHARE_OTHER_PROFILE = '[OTHER_PROFILE] UPDATE_NUMBER_SHARE_OTHER_PROFILE',
  UPDATE_NUMBER_UNSHARE_HOME = '[HOME] UPDATE_NUMBER_UNSHARE_HOME',
  UPDATE_NUMBER_UNSHARE_PROFILE = '[PROFILE] UPDATE_NUMBER_UNSHARE_PROFILE',
  UPDATE_NUMBER_UNSHARE_OTHER_PROFILE = '[OTHER_PROFILE] UPDATE_NUMBER_UNSHARE_OTHER_PROFILE',
  //
  UPDATE_COUNT_LIKE_PROFILE = '[PROFILE] UPDATE_COUNT_LIKE_PROFILE',
  UPDATE_COUNT_LIKE_OTHER_PROFILE = '[PROFILE] UPDATE_COUNT_LIKE_OTHER_PROFILE',
}

export const emitter = <T>(type: EDeviceEmitter, param?: T) => {
  DeviceEventEmitter.emit(type, param);
};

const useEmitter = <G>(type: EDeviceEmitter, callback?: (data: G) => void, deps: any = []) => {
  const savedCallback = React.useRef((_data: G) => {});

  if (callback) {
    savedCallback.current = callback;
  }

  React.useEffect(() => {
    DeviceEventEmitter.addListener(type, savedCallback.current);
    return () => {
      DeviceEventEmitter.removeAllListeners(type);
    };
  }, [type, ...deps]);
};

export default useEmitter;
